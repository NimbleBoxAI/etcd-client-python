# coding: utf-8

"""
    api/etcdserverpb/rpc.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from etcd_client.configuration import Configuration


class EtcdserverpbDeleteRangeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'prev_kv': 'bool',
        'range_end': 'str'
    }

    attribute_map = {
        'key': 'key',
        'prev_kv': 'prev_kv',
        'range_end': 'range_end'
    }

    def __init__(self, key=None, prev_kv=None, range_end=None, _configuration=None):  # noqa: E501
        """EtcdserverpbDeleteRangeRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key = None
        self._prev_kv = None
        self._range_end = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if prev_kv is not None:
            self.prev_kv = prev_kv
        if range_end is not None:
            self.range_end = range_end

    @property
    def key(self):
        """Gets the key of this EtcdserverpbDeleteRangeRequest.  # noqa: E501

        key is the first key to delete in the range.  # noqa: E501

        :return: The key of this EtcdserverpbDeleteRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EtcdserverpbDeleteRangeRequest.

        key is the first key to delete in the range.  # noqa: E501

        :param key: The key of this EtcdserverpbDeleteRangeRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                key is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', key)):  # noqa: E501
            raise ValueError(r"Invalid value for `key`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._key = key

    @property
    def prev_kv(self):
        """Gets the prev_kv of this EtcdserverpbDeleteRangeRequest.  # noqa: E501

        If prev_kv is set, etcd gets the previous key-value pairs before deleting it. The previous key-value pairs will be returned in the delete response.  # noqa: E501

        :return: The prev_kv of this EtcdserverpbDeleteRangeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._prev_kv

    @prev_kv.setter
    def prev_kv(self, prev_kv):
        """Sets the prev_kv of this EtcdserverpbDeleteRangeRequest.

        If prev_kv is set, etcd gets the previous key-value pairs before deleting it. The previous key-value pairs will be returned in the delete response.  # noqa: E501

        :param prev_kv: The prev_kv of this EtcdserverpbDeleteRangeRequest.  # noqa: E501
        :type: bool
        """

        self._prev_kv = prev_kv

    @property
    def range_end(self):
        """Gets the range_end of this EtcdserverpbDeleteRangeRequest.  # noqa: E501

        range_end is the key following the last key to delete for the range [key, range_end). If range_end is not given, the range is defined to contain only the key argument. If range_end is one bit larger than the given key, then the range is all the keys with the prefix (the given key). If range_end is '\\0', the range is all keys greater than or equal to the key argument.  # noqa: E501

        :return: The range_end of this EtcdserverpbDeleteRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this EtcdserverpbDeleteRangeRequest.

        range_end is the key following the last key to delete for the range [key, range_end). If range_end is not given, the range is defined to contain only the key argument. If range_end is one bit larger than the given key, then the range is all the keys with the prefix (the given key). If range_end is '\\0', the range is all keys greater than or equal to the key argument.  # noqa: E501

        :param range_end: The range_end of this EtcdserverpbDeleteRangeRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                range_end is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', range_end)):  # noqa: E501
            raise ValueError(r"Invalid value for `range_end`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._range_end = range_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EtcdserverpbDeleteRangeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtcdserverpbDeleteRangeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtcdserverpbDeleteRangeRequest):
            return True

        return self.to_dict() != other.to_dict()
