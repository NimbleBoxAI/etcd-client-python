# coding: utf-8

"""
    api/etcdserverpb/rpc.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from etcd_client.configuration import Configuration


class EtcdserverpbResponseOp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_delete_range': 'EtcdserverpbDeleteRangeResponse',
        'response_put': 'EtcdserverpbPutResponse',
        'response_range': 'EtcdserverpbRangeResponse',
        'response_txn': 'EtcdserverpbTxnResponse'
    }

    attribute_map = {
        'response_delete_range': 'response_delete_range',
        'response_put': 'response_put',
        'response_range': 'response_range',
        'response_txn': 'response_txn'
    }

    def __init__(self, response_delete_range=None, response_put=None, response_range=None, response_txn=None, _configuration=None):  # noqa: E501
        """EtcdserverpbResponseOp - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._response_delete_range = None
        self._response_put = None
        self._response_range = None
        self._response_txn = None
        self.discriminator = None

        if response_delete_range is not None:
            self.response_delete_range = response_delete_range
        if response_put is not None:
            self.response_put = response_put
        if response_range is not None:
            self.response_range = response_range
        if response_txn is not None:
            self.response_txn = response_txn

    @property
    def response_delete_range(self):
        """Gets the response_delete_range of this EtcdserverpbResponseOp.  # noqa: E501


        :return: The response_delete_range of this EtcdserverpbResponseOp.  # noqa: E501
        :rtype: EtcdserverpbDeleteRangeResponse
        """
        return self._response_delete_range

    @response_delete_range.setter
    def response_delete_range(self, response_delete_range):
        """Sets the response_delete_range of this EtcdserverpbResponseOp.


        :param response_delete_range: The response_delete_range of this EtcdserverpbResponseOp.  # noqa: E501
        :type: EtcdserverpbDeleteRangeResponse
        """

        self._response_delete_range = response_delete_range

    @property
    def response_put(self):
        """Gets the response_put of this EtcdserverpbResponseOp.  # noqa: E501


        :return: The response_put of this EtcdserverpbResponseOp.  # noqa: E501
        :rtype: EtcdserverpbPutResponse
        """
        return self._response_put

    @response_put.setter
    def response_put(self, response_put):
        """Sets the response_put of this EtcdserverpbResponseOp.


        :param response_put: The response_put of this EtcdserverpbResponseOp.  # noqa: E501
        :type: EtcdserverpbPutResponse
        """

        self._response_put = response_put

    @property
    def response_range(self):
        """Gets the response_range of this EtcdserverpbResponseOp.  # noqa: E501


        :return: The response_range of this EtcdserverpbResponseOp.  # noqa: E501
        :rtype: EtcdserverpbRangeResponse
        """
        return self._response_range

    @response_range.setter
    def response_range(self, response_range):
        """Sets the response_range of this EtcdserverpbResponseOp.


        :param response_range: The response_range of this EtcdserverpbResponseOp.  # noqa: E501
        :type: EtcdserverpbRangeResponse
        """

        self._response_range = response_range

    @property
    def response_txn(self):
        """Gets the response_txn of this EtcdserverpbResponseOp.  # noqa: E501


        :return: The response_txn of this EtcdserverpbResponseOp.  # noqa: E501
        :rtype: EtcdserverpbTxnResponse
        """
        return self._response_txn

    @response_txn.setter
    def response_txn(self, response_txn):
        """Sets the response_txn of this EtcdserverpbResponseOp.


        :param response_txn: The response_txn of this EtcdserverpbResponseOp.  # noqa: E501
        :type: EtcdserverpbTxnResponse
        """

        self._response_txn = response_txn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EtcdserverpbResponseOp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtcdserverpbResponseOp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtcdserverpbResponseOp):
            return True

        return self.to_dict() != other.to_dict()
