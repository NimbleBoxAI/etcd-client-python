# coding: utf-8

"""
    api/etcdserverpb/rpc.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from etcd_client.configuration import Configuration


class EtcdserverpbWatchCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'list[WatchCreateRequestFilterType]',
        'fragment': 'bool',
        'key': 'str',
        'prev_kv': 'bool',
        'progress_notify': 'bool',
        'range_end': 'str',
        'start_revision': 'str',
        'watch_id': 'str'
    }

    attribute_map = {
        'filters': 'filters',
        'fragment': 'fragment',
        'key': 'key',
        'prev_kv': 'prev_kv',
        'progress_notify': 'progress_notify',
        'range_end': 'range_end',
        'start_revision': 'start_revision',
        'watch_id': 'watch_id'
    }

    def __init__(self, filters=None, fragment=None, key=None, prev_kv=None, progress_notify=None, range_end=None, start_revision=None, watch_id=None, _configuration=None):  # noqa: E501
        """EtcdserverpbWatchCreateRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filters = None
        self._fragment = None
        self._key = None
        self._prev_kv = None
        self._progress_notify = None
        self._range_end = None
        self._start_revision = None
        self._watch_id = None
        self.discriminator = None

        if filters is not None:
            self.filters = filters
        if fragment is not None:
            self.fragment = fragment
        if key is not None:
            self.key = key
        if prev_kv is not None:
            self.prev_kv = prev_kv
        if progress_notify is not None:
            self.progress_notify = progress_notify
        if range_end is not None:
            self.range_end = range_end
        if start_revision is not None:
            self.start_revision = start_revision
        if watch_id is not None:
            self.watch_id = watch_id

    @property
    def filters(self):
        """Gets the filters of this EtcdserverpbWatchCreateRequest.  # noqa: E501

        filters filter the events at server side before it sends back to the watcher.  # noqa: E501

        :return: The filters of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :rtype: list[WatchCreateRequestFilterType]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this EtcdserverpbWatchCreateRequest.

        filters filter the events at server side before it sends back to the watcher.  # noqa: E501

        :param filters: The filters of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :type: list[WatchCreateRequestFilterType]
        """

        self._filters = filters

    @property
    def fragment(self):
        """Gets the fragment of this EtcdserverpbWatchCreateRequest.  # noqa: E501

        fragment enables splitting large revisions into multiple watch responses.  # noqa: E501

        :return: The fragment of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._fragment

    @fragment.setter
    def fragment(self, fragment):
        """Sets the fragment of this EtcdserverpbWatchCreateRequest.

        fragment enables splitting large revisions into multiple watch responses.  # noqa: E501

        :param fragment: The fragment of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :type: bool
        """

        self._fragment = fragment

    @property
    def key(self):
        """Gets the key of this EtcdserverpbWatchCreateRequest.  # noqa: E501

        key is the key to register for watching.  # noqa: E501

        :return: The key of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EtcdserverpbWatchCreateRequest.

        key is the key to register for watching.  # noqa: E501

        :param key: The key of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                key is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', key)):  # noqa: E501
            raise ValueError(r"Invalid value for `key`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._key = key

    @property
    def prev_kv(self):
        """Gets the prev_kv of this EtcdserverpbWatchCreateRequest.  # noqa: E501

        If prev_kv is set, created watcher gets the previous KV before the event happens. If the previous KV is already compacted, nothing will be returned.  # noqa: E501

        :return: The prev_kv of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._prev_kv

    @prev_kv.setter
    def prev_kv(self, prev_kv):
        """Sets the prev_kv of this EtcdserverpbWatchCreateRequest.

        If prev_kv is set, created watcher gets the previous KV before the event happens. If the previous KV is already compacted, nothing will be returned.  # noqa: E501

        :param prev_kv: The prev_kv of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :type: bool
        """

        self._prev_kv = prev_kv

    @property
    def progress_notify(self):
        """Gets the progress_notify of this EtcdserverpbWatchCreateRequest.  # noqa: E501

        progress_notify is set so that the etcd server will periodically send a WatchResponse with no events to the new watcher if there are no recent events. It is useful when clients wish to recover a disconnected watcher starting from a recent known revision. The etcd server may decide how often it will send notifications based on current load.  # noqa: E501

        :return: The progress_notify of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._progress_notify

    @progress_notify.setter
    def progress_notify(self, progress_notify):
        """Sets the progress_notify of this EtcdserverpbWatchCreateRequest.

        progress_notify is set so that the etcd server will periodically send a WatchResponse with no events to the new watcher if there are no recent events. It is useful when clients wish to recover a disconnected watcher starting from a recent known revision. The etcd server may decide how often it will send notifications based on current load.  # noqa: E501

        :param progress_notify: The progress_notify of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :type: bool
        """

        self._progress_notify = progress_notify

    @property
    def range_end(self):
        """Gets the range_end of this EtcdserverpbWatchCreateRequest.  # noqa: E501

        range_end is the end of the range [key, range_end) to watch. If range_end is not given, only the key argument is watched. If range_end is equal to '\\0', all keys greater than or equal to the key argument are watched. If the range_end is one bit larger than the given key, then all keys with the prefix (the given key) will be watched.  # noqa: E501

        :return: The range_end of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this EtcdserverpbWatchCreateRequest.

        range_end is the end of the range [key, range_end) to watch. If range_end is not given, only the key argument is watched. If range_end is equal to '\\0', all keys greater than or equal to the key argument are watched. If the range_end is one bit larger than the given key, then all keys with the prefix (the given key) will be watched.  # noqa: E501

        :param range_end: The range_end of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                range_end is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', range_end)):  # noqa: E501
            raise ValueError(r"Invalid value for `range_end`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._range_end = range_end

    @property
    def start_revision(self):
        """Gets the start_revision of this EtcdserverpbWatchCreateRequest.  # noqa: E501

        start_revision is an optional revision to watch from (inclusive). No start_revision is \"now\".  # noqa: E501

        :return: The start_revision of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_revision

    @start_revision.setter
    def start_revision(self, start_revision):
        """Sets the start_revision of this EtcdserverpbWatchCreateRequest.

        start_revision is an optional revision to watch from (inclusive). No start_revision is \"now\".  # noqa: E501

        :param start_revision: The start_revision of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :type: str
        """

        self._start_revision = start_revision

    @property
    def watch_id(self):
        """Gets the watch_id of this EtcdserverpbWatchCreateRequest.  # noqa: E501

        If watch_id is provided and non-zero, it will be assigned to this watcher. Since creating a watcher in etcd is not a synchronous operation, this can be used ensure that ordering is correct when creating multiple watchers on the same stream. Creating a watcher with an ID already in use on the stream will cause an error to be returned.  # noqa: E501

        :return: The watch_id of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._watch_id

    @watch_id.setter
    def watch_id(self, watch_id):
        """Sets the watch_id of this EtcdserverpbWatchCreateRequest.

        If watch_id is provided and non-zero, it will be assigned to this watcher. Since creating a watcher in etcd is not a synchronous operation, this can be used ensure that ordering is correct when creating multiple watchers on the same stream. Creating a watcher with an ID already in use on the stream will cause an error to be returned.  # noqa: E501

        :param watch_id: The watch_id of this EtcdserverpbWatchCreateRequest.  # noqa: E501
        :type: str
        """

        self._watch_id = watch_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EtcdserverpbWatchCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtcdserverpbWatchCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtcdserverpbWatchCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
