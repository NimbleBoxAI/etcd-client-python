# coding: utf-8

"""
    api/etcdserverpb/rpc.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from etcd_client.configuration import Configuration


class EtcdserverpbStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'db_size': 'str',
        'db_size_in_use': 'str',
        'errors': 'list[str]',
        'header': 'EtcdserverpbResponseHeader',
        'is_learner': 'bool',
        'leader': 'str',
        'raft_applied_index': 'str',
        'raft_index': 'str',
        'raft_term': 'str',
        'version': 'str'
    }

    attribute_map = {
        'db_size': 'dbSize',
        'db_size_in_use': 'dbSizeInUse',
        'errors': 'errors',
        'header': 'header',
        'is_learner': 'isLearner',
        'leader': 'leader',
        'raft_applied_index': 'raftAppliedIndex',
        'raft_index': 'raftIndex',
        'raft_term': 'raftTerm',
        'version': 'version'
    }

    def __init__(self, db_size=None, db_size_in_use=None, errors=None, header=None, is_learner=None, leader=None, raft_applied_index=None, raft_index=None, raft_term=None, version=None, _configuration=None):  # noqa: E501
        """EtcdserverpbStatusResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._db_size = None
        self._db_size_in_use = None
        self._errors = None
        self._header = None
        self._is_learner = None
        self._leader = None
        self._raft_applied_index = None
        self._raft_index = None
        self._raft_term = None
        self._version = None
        self.discriminator = None

        if db_size is not None:
            self.db_size = db_size
        if db_size_in_use is not None:
            self.db_size_in_use = db_size_in_use
        if errors is not None:
            self.errors = errors
        if header is not None:
            self.header = header
        if is_learner is not None:
            self.is_learner = is_learner
        if leader is not None:
            self.leader = leader
        if raft_applied_index is not None:
            self.raft_applied_index = raft_applied_index
        if raft_index is not None:
            self.raft_index = raft_index
        if raft_term is not None:
            self.raft_term = raft_term
        if version is not None:
            self.version = version

    @property
    def db_size(self):
        """Gets the db_size of this EtcdserverpbStatusResponse.  # noqa: E501

        dbSize is the size of the backend database physically allocated, in bytes, of the responding member.  # noqa: E501

        :return: The db_size of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._db_size

    @db_size.setter
    def db_size(self, db_size):
        """Sets the db_size of this EtcdserverpbStatusResponse.

        dbSize is the size of the backend database physically allocated, in bytes, of the responding member.  # noqa: E501

        :param db_size: The db_size of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: str
        """

        self._db_size = db_size

    @property
    def db_size_in_use(self):
        """Gets the db_size_in_use of this EtcdserverpbStatusResponse.  # noqa: E501

        dbSizeInUse is the size of the backend database logically in use, in bytes, of the responding member.  # noqa: E501

        :return: The db_size_in_use of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._db_size_in_use

    @db_size_in_use.setter
    def db_size_in_use(self, db_size_in_use):
        """Sets the db_size_in_use of this EtcdserverpbStatusResponse.

        dbSizeInUse is the size of the backend database logically in use, in bytes, of the responding member.  # noqa: E501

        :param db_size_in_use: The db_size_in_use of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: str
        """

        self._db_size_in_use = db_size_in_use

    @property
    def errors(self):
        """Gets the errors of this EtcdserverpbStatusResponse.  # noqa: E501

        errors contains alarm/health information and status.  # noqa: E501

        :return: The errors of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this EtcdserverpbStatusResponse.

        errors contains alarm/health information and status.  # noqa: E501

        :param errors: The errors of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    @property
    def header(self):
        """Gets the header of this EtcdserverpbStatusResponse.  # noqa: E501


        :return: The header of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: EtcdserverpbResponseHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this EtcdserverpbStatusResponse.


        :param header: The header of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: EtcdserverpbResponseHeader
        """

        self._header = header

    @property
    def is_learner(self):
        """Gets the is_learner of this EtcdserverpbStatusResponse.  # noqa: E501

        isLearner indicates if the member is raft learner.  # noqa: E501

        :return: The is_learner of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_learner

    @is_learner.setter
    def is_learner(self, is_learner):
        """Sets the is_learner of this EtcdserverpbStatusResponse.

        isLearner indicates if the member is raft learner.  # noqa: E501

        :param is_learner: The is_learner of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: bool
        """

        self._is_learner = is_learner

    @property
    def leader(self):
        """Gets the leader of this EtcdserverpbStatusResponse.  # noqa: E501

        leader is the member ID which the responding member believes is the current leader.  # noqa: E501

        :return: The leader of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._leader

    @leader.setter
    def leader(self, leader):
        """Sets the leader of this EtcdserverpbStatusResponse.

        leader is the member ID which the responding member believes is the current leader.  # noqa: E501

        :param leader: The leader of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: str
        """

        self._leader = leader

    @property
    def raft_applied_index(self):
        """Gets the raft_applied_index of this EtcdserverpbStatusResponse.  # noqa: E501

        raftAppliedIndex is the current raft applied index of the responding member.  # noqa: E501

        :return: The raft_applied_index of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._raft_applied_index

    @raft_applied_index.setter
    def raft_applied_index(self, raft_applied_index):
        """Sets the raft_applied_index of this EtcdserverpbStatusResponse.

        raftAppliedIndex is the current raft applied index of the responding member.  # noqa: E501

        :param raft_applied_index: The raft_applied_index of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: str
        """

        self._raft_applied_index = raft_applied_index

    @property
    def raft_index(self):
        """Gets the raft_index of this EtcdserverpbStatusResponse.  # noqa: E501

        raftIndex is the current raft committed index of the responding member.  # noqa: E501

        :return: The raft_index of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._raft_index

    @raft_index.setter
    def raft_index(self, raft_index):
        """Sets the raft_index of this EtcdserverpbStatusResponse.

        raftIndex is the current raft committed index of the responding member.  # noqa: E501

        :param raft_index: The raft_index of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: str
        """

        self._raft_index = raft_index

    @property
    def raft_term(self):
        """Gets the raft_term of this EtcdserverpbStatusResponse.  # noqa: E501

        raftTerm is the current raft term of the responding member.  # noqa: E501

        :return: The raft_term of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._raft_term

    @raft_term.setter
    def raft_term(self, raft_term):
        """Sets the raft_term of this EtcdserverpbStatusResponse.

        raftTerm is the current raft term of the responding member.  # noqa: E501

        :param raft_term: The raft_term of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: str
        """

        self._raft_term = raft_term

    @property
    def version(self):
        """Gets the version of this EtcdserverpbStatusResponse.  # noqa: E501

        version is the cluster protocol version used by the responding member.  # noqa: E501

        :return: The version of this EtcdserverpbStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EtcdserverpbStatusResponse.

        version is the cluster protocol version used by the responding member.  # noqa: E501

        :param version: The version of this EtcdserverpbStatusResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EtcdserverpbStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtcdserverpbStatusResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtcdserverpbStatusResponse):
            return True

        return self.to_dict() != other.to_dict()
