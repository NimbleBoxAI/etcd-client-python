# coding: utf-8

"""
    api/etcdserverpb/rpc.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from etcd_client.configuration import Configuration


class EtcdserverpbRangeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count_only': 'bool',
        'key': 'str',
        'keys_only': 'bool',
        'limit': 'str',
        'max_create_revision': 'str',
        'max_mod_revision': 'str',
        'min_create_revision': 'str',
        'min_mod_revision': 'str',
        'range_end': 'str',
        'revision': 'str',
        'serializable': 'bool',
        'sort_order': 'RangeRequestSortOrder',
        'sort_target': 'RangeRequestSortTarget'
    }

    attribute_map = {
        'count_only': 'count_only',
        'key': 'key',
        'keys_only': 'keys_only',
        'limit': 'limit',
        'max_create_revision': 'max_create_revision',
        'max_mod_revision': 'max_mod_revision',
        'min_create_revision': 'min_create_revision',
        'min_mod_revision': 'min_mod_revision',
        'range_end': 'range_end',
        'revision': 'revision',
        'serializable': 'serializable',
        'sort_order': 'sort_order',
        'sort_target': 'sort_target'
    }

    def __init__(self, count_only=None, key=None, keys_only=None, limit=None, max_create_revision=None, max_mod_revision=None, min_create_revision=None, min_mod_revision=None, range_end=None, revision=None, serializable=None, sort_order=None, sort_target=None, _configuration=None):  # noqa: E501
        """EtcdserverpbRangeRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._count_only = None
        self._key = None
        self._keys_only = None
        self._limit = None
        self._max_create_revision = None
        self._max_mod_revision = None
        self._min_create_revision = None
        self._min_mod_revision = None
        self._range_end = None
        self._revision = None
        self._serializable = None
        self._sort_order = None
        self._sort_target = None
        self.discriminator = None

        if count_only is not None:
            self.count_only = count_only
        if key is not None:
            self.key = key
        if keys_only is not None:
            self.keys_only = keys_only
        if limit is not None:
            self.limit = limit
        if max_create_revision is not None:
            self.max_create_revision = max_create_revision
        if max_mod_revision is not None:
            self.max_mod_revision = max_mod_revision
        if min_create_revision is not None:
            self.min_create_revision = min_create_revision
        if min_mod_revision is not None:
            self.min_mod_revision = min_mod_revision
        if range_end is not None:
            self.range_end = range_end
        if revision is not None:
            self.revision = revision
        if serializable is not None:
            self.serializable = serializable
        if sort_order is not None:
            self.sort_order = sort_order
        if sort_target is not None:
            self.sort_target = sort_target

    @property
    def count_only(self):
        """Gets the count_only of this EtcdserverpbRangeRequest.  # noqa: E501

        count_only when set returns only the count of the keys in the range.  # noqa: E501

        :return: The count_only of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._count_only

    @count_only.setter
    def count_only(self, count_only):
        """Sets the count_only of this EtcdserverpbRangeRequest.

        count_only when set returns only the count of the keys in the range.  # noqa: E501

        :param count_only: The count_only of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: bool
        """

        self._count_only = count_only

    @property
    def key(self):
        """Gets the key of this EtcdserverpbRangeRequest.  # noqa: E501

        key is the first key for the range. If range_end is not given, the request only looks up key.  # noqa: E501

        :return: The key of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EtcdserverpbRangeRequest.

        key is the first key for the range. If range_end is not given, the request only looks up key.  # noqa: E501

        :param key: The key of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                key is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', key)):  # noqa: E501
            raise ValueError(r"Invalid value for `key`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._key = key

    @property
    def keys_only(self):
        """Gets the keys_only of this EtcdserverpbRangeRequest.  # noqa: E501

        keys_only when set returns only the keys and not the values.  # noqa: E501

        :return: The keys_only of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._keys_only

    @keys_only.setter
    def keys_only(self, keys_only):
        """Sets the keys_only of this EtcdserverpbRangeRequest.

        keys_only when set returns only the keys and not the values.  # noqa: E501

        :param keys_only: The keys_only of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: bool
        """

        self._keys_only = keys_only

    @property
    def limit(self):
        """Gets the limit of this EtcdserverpbRangeRequest.  # noqa: E501

        limit is a limit on the number of keys returned for the request. When limit is set to 0, it is treated as no limit.  # noqa: E501

        :return: The limit of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this EtcdserverpbRangeRequest.

        limit is a limit on the number of keys returned for the request. When limit is set to 0, it is treated as no limit.  # noqa: E501

        :param limit: The limit of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: str
        """

        self._limit = limit

    @property
    def max_create_revision(self):
        """Gets the max_create_revision of this EtcdserverpbRangeRequest.  # noqa: E501

        max_create_revision is the upper bound for returned key create revisions; all keys with greater create revisions will be filtered away.  # noqa: E501

        :return: The max_create_revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._max_create_revision

    @max_create_revision.setter
    def max_create_revision(self, max_create_revision):
        """Sets the max_create_revision of this EtcdserverpbRangeRequest.

        max_create_revision is the upper bound for returned key create revisions; all keys with greater create revisions will be filtered away.  # noqa: E501

        :param max_create_revision: The max_create_revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: str
        """

        self._max_create_revision = max_create_revision

    @property
    def max_mod_revision(self):
        """Gets the max_mod_revision of this EtcdserverpbRangeRequest.  # noqa: E501

        max_mod_revision is the upper bound for returned key mod revisions; all keys with greater mod revisions will be filtered away.  # noqa: E501

        :return: The max_mod_revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._max_mod_revision

    @max_mod_revision.setter
    def max_mod_revision(self, max_mod_revision):
        """Sets the max_mod_revision of this EtcdserverpbRangeRequest.

        max_mod_revision is the upper bound for returned key mod revisions; all keys with greater mod revisions will be filtered away.  # noqa: E501

        :param max_mod_revision: The max_mod_revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: str
        """

        self._max_mod_revision = max_mod_revision

    @property
    def min_create_revision(self):
        """Gets the min_create_revision of this EtcdserverpbRangeRequest.  # noqa: E501

        min_create_revision is the lower bound for returned key create revisions; all keys with lesser create revisions will be filtered away.  # noqa: E501

        :return: The min_create_revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._min_create_revision

    @min_create_revision.setter
    def min_create_revision(self, min_create_revision):
        """Sets the min_create_revision of this EtcdserverpbRangeRequest.

        min_create_revision is the lower bound for returned key create revisions; all keys with lesser create revisions will be filtered away.  # noqa: E501

        :param min_create_revision: The min_create_revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: str
        """

        self._min_create_revision = min_create_revision

    @property
    def min_mod_revision(self):
        """Gets the min_mod_revision of this EtcdserverpbRangeRequest.  # noqa: E501

        min_mod_revision is the lower bound for returned key mod revisions; all keys with lesser mod revisions will be filtered away.  # noqa: E501

        :return: The min_mod_revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._min_mod_revision

    @min_mod_revision.setter
    def min_mod_revision(self, min_mod_revision):
        """Sets the min_mod_revision of this EtcdserverpbRangeRequest.

        min_mod_revision is the lower bound for returned key mod revisions; all keys with lesser mod revisions will be filtered away.  # noqa: E501

        :param min_mod_revision: The min_mod_revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: str
        """

        self._min_mod_revision = min_mod_revision

    @property
    def range_end(self):
        """Gets the range_end of this EtcdserverpbRangeRequest.  # noqa: E501

        range_end is the upper bound on the requested range [key, range_end). If range_end is '\\0', the range is all keys >= key. If range_end is key plus one (e.g., \"aa\"+1 == \"ab\", \"a\\xff\"+1 == \"b\"), then the range request gets all keys prefixed with key. If both key and range_end are '\\0', then the range request returns all keys.  # noqa: E501

        :return: The range_end of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this EtcdserverpbRangeRequest.

        range_end is the upper bound on the requested range [key, range_end). If range_end is '\\0', the range is all keys >= key. If range_end is key plus one (e.g., \"aa\"+1 == \"ab\", \"a\\xff\"+1 == \"b\"), then the range request gets all keys prefixed with key. If both key and range_end are '\\0', then the range request returns all keys.  # noqa: E501

        :param range_end: The range_end of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                range_end is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', range_end)):  # noqa: E501
            raise ValueError(r"Invalid value for `range_end`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._range_end = range_end

    @property
    def revision(self):
        """Gets the revision of this EtcdserverpbRangeRequest.  # noqa: E501

        revision is the point-in-time of the key-value store to use for the range. If revision is less or equal to zero, the range is over the newest key-value store. If the revision has been compacted, ErrCompacted is returned as a response.  # noqa: E501

        :return: The revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this EtcdserverpbRangeRequest.

        revision is the point-in-time of the key-value store to use for the range. If revision is less or equal to zero, the range is over the newest key-value store. If the revision has been compacted, ErrCompacted is returned as a response.  # noqa: E501

        :param revision: The revision of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def serializable(self):
        """Gets the serializable of this EtcdserverpbRangeRequest.  # noqa: E501

        serializable sets the range request to use serializable member-local reads. Range requests are linearizable by default; linearizable requests have higher latency and lower throughput than serializable requests but reflect the current consensus of the cluster. For better performance, in exchange for possible stale reads, a serializable range request is served locally without needing to reach consensus with other nodes in the cluster.  # noqa: E501

        :return: The serializable of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._serializable

    @serializable.setter
    def serializable(self, serializable):
        """Sets the serializable of this EtcdserverpbRangeRequest.

        serializable sets the range request to use serializable member-local reads. Range requests are linearizable by default; linearizable requests have higher latency and lower throughput than serializable requests but reflect the current consensus of the cluster. For better performance, in exchange for possible stale reads, a serializable range request is served locally without needing to reach consensus with other nodes in the cluster.  # noqa: E501

        :param serializable: The serializable of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: bool
        """

        self._serializable = serializable

    @property
    def sort_order(self):
        """Gets the sort_order of this EtcdserverpbRangeRequest.  # noqa: E501

        sort_order is the order for returned sorted results.  # noqa: E501

        :return: The sort_order of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: RangeRequestSortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this EtcdserverpbRangeRequest.

        sort_order is the order for returned sorted results.  # noqa: E501

        :param sort_order: The sort_order of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: RangeRequestSortOrder
        """

        self._sort_order = sort_order

    @property
    def sort_target(self):
        """Gets the sort_target of this EtcdserverpbRangeRequest.  # noqa: E501

        sort_target is the key-value field to use for sorting.  # noqa: E501

        :return: The sort_target of this EtcdserverpbRangeRequest.  # noqa: E501
        :rtype: RangeRequestSortTarget
        """
        return self._sort_target

    @sort_target.setter
    def sort_target(self, sort_target):
        """Sets the sort_target of this EtcdserverpbRangeRequest.

        sort_target is the key-value field to use for sorting.  # noqa: E501

        :param sort_target: The sort_target of this EtcdserverpbRangeRequest.  # noqa: E501
        :type: RangeRequestSortTarget
        """

        self._sort_target = sort_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EtcdserverpbRangeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtcdserverpbRangeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtcdserverpbRangeRequest):
            return True

        return self.to_dict() != other.to_dict()
