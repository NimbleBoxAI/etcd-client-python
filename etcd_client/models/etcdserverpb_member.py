# coding: utf-8

"""
    api/etcdserverpb/rpc.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from etcd_client.configuration import Configuration


class EtcdserverpbMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_ur_ls': 'list[str]',
        'is_learner': 'bool',
        'name': 'str',
        'peer_ur_ls': 'list[str]'
    }

    attribute_map = {
        'id': 'ID',
        'client_ur_ls': 'clientURLs',
        'is_learner': 'isLearner',
        'name': 'name',
        'peer_ur_ls': 'peerURLs'
    }

    def __init__(self, id=None, client_ur_ls=None, is_learner=None, name=None, peer_ur_ls=None, _configuration=None):  # noqa: E501
        """EtcdserverpbMember - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._client_ur_ls = None
        self._is_learner = None
        self._name = None
        self._peer_ur_ls = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_ur_ls is not None:
            self.client_ur_ls = client_ur_ls
        if is_learner is not None:
            self.is_learner = is_learner
        if name is not None:
            self.name = name
        if peer_ur_ls is not None:
            self.peer_ur_ls = peer_ur_ls

    @property
    def id(self):
        """Gets the id of this EtcdserverpbMember.  # noqa: E501

        ID is the member ID for this member.  # noqa: E501

        :return: The id of this EtcdserverpbMember.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EtcdserverpbMember.

        ID is the member ID for this member.  # noqa: E501

        :param id: The id of this EtcdserverpbMember.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_ur_ls(self):
        """Gets the client_ur_ls of this EtcdserverpbMember.  # noqa: E501

        clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.  # noqa: E501

        :return: The client_ur_ls of this EtcdserverpbMember.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_ur_ls

    @client_ur_ls.setter
    def client_ur_ls(self, client_ur_ls):
        """Sets the client_ur_ls of this EtcdserverpbMember.

        clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.  # noqa: E501

        :param client_ur_ls: The client_ur_ls of this EtcdserverpbMember.  # noqa: E501
        :type: list[str]
        """

        self._client_ur_ls = client_ur_ls

    @property
    def is_learner(self):
        """Gets the is_learner of this EtcdserverpbMember.  # noqa: E501

        isLearner indicates if the member is raft learner.  # noqa: E501

        :return: The is_learner of this EtcdserverpbMember.  # noqa: E501
        :rtype: bool
        """
        return self._is_learner

    @is_learner.setter
    def is_learner(self, is_learner):
        """Sets the is_learner of this EtcdserverpbMember.

        isLearner indicates if the member is raft learner.  # noqa: E501

        :param is_learner: The is_learner of this EtcdserverpbMember.  # noqa: E501
        :type: bool
        """

        self._is_learner = is_learner

    @property
    def name(self):
        """Gets the name of this EtcdserverpbMember.  # noqa: E501

        name is the human-readable name of the member. If the member is not started, the name will be an empty string.  # noqa: E501

        :return: The name of this EtcdserverpbMember.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EtcdserverpbMember.

        name is the human-readable name of the member. If the member is not started, the name will be an empty string.  # noqa: E501

        :param name: The name of this EtcdserverpbMember.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def peer_ur_ls(self):
        """Gets the peer_ur_ls of this EtcdserverpbMember.  # noqa: E501

        peerURLs is the list of URLs the member exposes to the cluster for communication.  # noqa: E501

        :return: The peer_ur_ls of this EtcdserverpbMember.  # noqa: E501
        :rtype: list[str]
        """
        return self._peer_ur_ls

    @peer_ur_ls.setter
    def peer_ur_ls(self, peer_ur_ls):
        """Sets the peer_ur_ls of this EtcdserverpbMember.

        peerURLs is the list of URLs the member exposes to the cluster for communication.  # noqa: E501

        :param peer_ur_ls: The peer_ur_ls of this EtcdserverpbMember.  # noqa: E501
        :type: list[str]
        """

        self._peer_ur_ls = peer_ur_ls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EtcdserverpbMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtcdserverpbMember):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtcdserverpbMember):
            return True

        return self.to_dict() != other.to_dict()
