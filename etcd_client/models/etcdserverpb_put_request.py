# coding: utf-8

"""
    api/etcdserverpb/rpc.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from etcd_client.configuration import Configuration


class EtcdserverpbPutRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ignore_lease': 'bool',
        'ignore_value': 'bool',
        'key': 'str',
        'lease': 'str',
        'prev_kv': 'bool',
        'value': 'str'
    }

    attribute_map = {
        'ignore_lease': 'ignore_lease',
        'ignore_value': 'ignore_value',
        'key': 'key',
        'lease': 'lease',
        'prev_kv': 'prev_kv',
        'value': 'value'
    }

    def __init__(self, ignore_lease=None, ignore_value=None, key=None, lease=None, prev_kv=None, value=None, _configuration=None):  # noqa: E501
        """EtcdserverpbPutRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ignore_lease = None
        self._ignore_value = None
        self._key = None
        self._lease = None
        self._prev_kv = None
        self._value = None
        self.discriminator = None

        if ignore_lease is not None:
            self.ignore_lease = ignore_lease
        if ignore_value is not None:
            self.ignore_value = ignore_value
        if key is not None:
            self.key = key
        if lease is not None:
            self.lease = lease
        if prev_kv is not None:
            self.prev_kv = prev_kv
        if value is not None:
            self.value = value

    @property
    def ignore_lease(self):
        """Gets the ignore_lease of this EtcdserverpbPutRequest.  # noqa: E501

        If ignore_lease is set, etcd updates the key using its current lease. Returns an error if the key does not exist.  # noqa: E501

        :return: The ignore_lease of this EtcdserverpbPutRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_lease

    @ignore_lease.setter
    def ignore_lease(self, ignore_lease):
        """Sets the ignore_lease of this EtcdserverpbPutRequest.

        If ignore_lease is set, etcd updates the key using its current lease. Returns an error if the key does not exist.  # noqa: E501

        :param ignore_lease: The ignore_lease of this EtcdserverpbPutRequest.  # noqa: E501
        :type: bool
        """

        self._ignore_lease = ignore_lease

    @property
    def ignore_value(self):
        """Gets the ignore_value of this EtcdserverpbPutRequest.  # noqa: E501

        If ignore_value is set, etcd updates the key using its current value. Returns an error if the key does not exist.  # noqa: E501

        :return: The ignore_value of this EtcdserverpbPutRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_value

    @ignore_value.setter
    def ignore_value(self, ignore_value):
        """Sets the ignore_value of this EtcdserverpbPutRequest.

        If ignore_value is set, etcd updates the key using its current value. Returns an error if the key does not exist.  # noqa: E501

        :param ignore_value: The ignore_value of this EtcdserverpbPutRequest.  # noqa: E501
        :type: bool
        """

        self._ignore_value = ignore_value

    @property
    def key(self):
        """Gets the key of this EtcdserverpbPutRequest.  # noqa: E501

        key is the key, in bytes, to put into the key-value store.  # noqa: E501

        :return: The key of this EtcdserverpbPutRequest.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EtcdserverpbPutRequest.

        key is the key, in bytes, to put into the key-value store.  # noqa: E501

        :param key: The key of this EtcdserverpbPutRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                key is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', key)):  # noqa: E501
            raise ValueError(r"Invalid value for `key`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._key = key

    @property
    def lease(self):
        """Gets the lease of this EtcdserverpbPutRequest.  # noqa: E501

        lease is the lease ID to associate with the key in the key-value store. A lease value of 0 indicates no lease.  # noqa: E501

        :return: The lease of this EtcdserverpbPutRequest.  # noqa: E501
        :rtype: str
        """
        return self._lease

    @lease.setter
    def lease(self, lease):
        """Sets the lease of this EtcdserverpbPutRequest.

        lease is the lease ID to associate with the key in the key-value store. A lease value of 0 indicates no lease.  # noqa: E501

        :param lease: The lease of this EtcdserverpbPutRequest.  # noqa: E501
        :type: str
        """

        self._lease = lease

    @property
    def prev_kv(self):
        """Gets the prev_kv of this EtcdserverpbPutRequest.  # noqa: E501

        If prev_kv is set, etcd gets the previous key-value pair before changing it. The previous key-value pair will be returned in the put response.  # noqa: E501

        :return: The prev_kv of this EtcdserverpbPutRequest.  # noqa: E501
        :rtype: bool
        """
        return self._prev_kv

    @prev_kv.setter
    def prev_kv(self, prev_kv):
        """Sets the prev_kv of this EtcdserverpbPutRequest.

        If prev_kv is set, etcd gets the previous key-value pair before changing it. The previous key-value pair will be returned in the put response.  # noqa: E501

        :param prev_kv: The prev_kv of this EtcdserverpbPutRequest.  # noqa: E501
        :type: bool
        """

        self._prev_kv = prev_kv

    @property
    def value(self):
        """Gets the value of this EtcdserverpbPutRequest.  # noqa: E501

        value is the value, in bytes, to associate with the key in the key-value store.  # noqa: E501

        :return: The value of this EtcdserverpbPutRequest.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EtcdserverpbPutRequest.

        value is the value, in bytes, to associate with the key in the key-value store.  # noqa: E501

        :param value: The value of this EtcdserverpbPutRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                value is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', value)):  # noqa: E501
            raise ValueError(r"Invalid value for `value`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EtcdserverpbPutRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtcdserverpbPutRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtcdserverpbPutRequest):
            return True

        return self.to_dict() != other.to_dict()
