# coding: utf-8

"""
    api/etcdserverpb/rpc.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from etcd_client.configuration import Configuration


class EtcdserverpbCompactionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'physical': 'bool',
        'revision': 'str'
    }

    attribute_map = {
        'physical': 'physical',
        'revision': 'revision'
    }

    def __init__(self, physical=None, revision=None, _configuration=None):  # noqa: E501
        """EtcdserverpbCompactionRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._physical = None
        self._revision = None
        self.discriminator = None

        if physical is not None:
            self.physical = physical
        if revision is not None:
            self.revision = revision

    @property
    def physical(self):
        """Gets the physical of this EtcdserverpbCompactionRequest.  # noqa: E501

        physical is set so the RPC will wait until the compaction is physically applied to the local database such that compacted entries are totally removed from the backend database.  # noqa: E501

        :return: The physical of this EtcdserverpbCompactionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._physical

    @physical.setter
    def physical(self, physical):
        """Sets the physical of this EtcdserverpbCompactionRequest.

        physical is set so the RPC will wait until the compaction is physically applied to the local database such that compacted entries are totally removed from the backend database.  # noqa: E501

        :param physical: The physical of this EtcdserverpbCompactionRequest.  # noqa: E501
        :type: bool
        """

        self._physical = physical

    @property
    def revision(self):
        """Gets the revision of this EtcdserverpbCompactionRequest.  # noqa: E501

        revision is the key-value store revision for the compaction operation.  # noqa: E501

        :return: The revision of this EtcdserverpbCompactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this EtcdserverpbCompactionRequest.

        revision is the key-value store revision for the compaction operation.  # noqa: E501

        :param revision: The revision of this EtcdserverpbCompactionRequest.  # noqa: E501
        :type: str
        """

        self._revision = revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EtcdserverpbCompactionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtcdserverpbCompactionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtcdserverpbCompactionRequest):
            return True

        return self.to_dict() != other.to_dict()
