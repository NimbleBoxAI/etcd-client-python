# coding: utf-8

"""
    api/etcdserverpb/rpc.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from etcd_client.configuration import Configuration


class EtcdserverpbDeleteRangeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deleted': 'str',
        'header': 'EtcdserverpbResponseHeader',
        'prev_kvs': 'list[MvccpbKeyValue]'
    }

    attribute_map = {
        'deleted': 'deleted',
        'header': 'header',
        'prev_kvs': 'prev_kvs'
    }

    def __init__(self, deleted=None, header=None, prev_kvs=None, _configuration=None):  # noqa: E501
        """EtcdserverpbDeleteRangeResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deleted = None
        self._header = None
        self._prev_kvs = None
        self.discriminator = None

        if deleted is not None:
            self.deleted = deleted
        if header is not None:
            self.header = header
        if prev_kvs is not None:
            self.prev_kvs = prev_kvs

    @property
    def deleted(self):
        """Gets the deleted of this EtcdserverpbDeleteRangeResponse.  # noqa: E501

        deleted is the number of keys deleted by the delete range request.  # noqa: E501

        :return: The deleted of this EtcdserverpbDeleteRangeResponse.  # noqa: E501
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this EtcdserverpbDeleteRangeResponse.

        deleted is the number of keys deleted by the delete range request.  # noqa: E501

        :param deleted: The deleted of this EtcdserverpbDeleteRangeResponse.  # noqa: E501
        :type: str
        """

        self._deleted = deleted

    @property
    def header(self):
        """Gets the header of this EtcdserverpbDeleteRangeResponse.  # noqa: E501


        :return: The header of this EtcdserverpbDeleteRangeResponse.  # noqa: E501
        :rtype: EtcdserverpbResponseHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this EtcdserverpbDeleteRangeResponse.


        :param header: The header of this EtcdserverpbDeleteRangeResponse.  # noqa: E501
        :type: EtcdserverpbResponseHeader
        """

        self._header = header

    @property
    def prev_kvs(self):
        """Gets the prev_kvs of this EtcdserverpbDeleteRangeResponse.  # noqa: E501

        if prev_kv is set in the request, the previous key-value pairs will be returned.  # noqa: E501

        :return: The prev_kvs of this EtcdserverpbDeleteRangeResponse.  # noqa: E501
        :rtype: list[MvccpbKeyValue]
        """
        return self._prev_kvs

    @prev_kvs.setter
    def prev_kvs(self, prev_kvs):
        """Sets the prev_kvs of this EtcdserverpbDeleteRangeResponse.

        if prev_kv is set in the request, the previous key-value pairs will be returned.  # noqa: E501

        :param prev_kvs: The prev_kvs of this EtcdserverpbDeleteRangeResponse.  # noqa: E501
        :type: list[MvccpbKeyValue]
        """

        self._prev_kvs = prev_kvs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EtcdserverpbDeleteRangeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EtcdserverpbDeleteRangeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EtcdserverpbDeleteRangeResponse):
            return True

        return self.to_dict() != other.to_dict()
